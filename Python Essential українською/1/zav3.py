# Ознайомтеся зі спеціальними методами в Python, використовуючи посилання в кінці уроку, і навчіться використовувати ті з них,
# призначення яких ви можете зрозуміти. Повертайтеся до цієї теми протягом усього курсу та вивчайте спеціальні методи, що
# відповідають темам кожного уроку.


# Спеціальні методи (або dunder methods) в Python дозволяють вам визначити поведінку об'єктів для вбудованих операцій і функцій.
# Вони зазвичай мають імена, які починаються і закінчуються подвійними підкресленнями, наприклад, __init__, __str__,
# __repr__, і так далі. Ось короткий огляд деяких важливих спеціальних методів:

# __init__(self, ...): Ініціалізаційний метод, який викликається при створенні нового об'єкта класу. Його використовують для
# встановлення початкового стану об'єкта.

# class MyClass:
#     def __init__(self, value):
#         self.value = value
# __str__(self): Метод, який повертає строкове представлення об'єкта, що використовується функцією str() і для форматованого
# виводу (наприклад, в функції print).

# class MyClass:
#     def __str__(self):
#         return f'MyClass with value {self.value}'
# __repr__(self): Метод, який повертає строкове представлення об'єкта, що використовується функцією repr(), часто
# використовується для відлагодження.

# class MyClass:
#     def __repr__(self):
#         return f'MyClass(value={self.value})'
# __del__(self): Деструктор, який викликається при видаленні об'єкта.

# class MyClass:
#     def __del__(self):
#         print('Object is being deleted')
# __len__(self): Метод, який повертає довжину об'єкта, реалізує підтримку функції len().

# class MyClass:
#     def __len__(self):
#         return len(self.value)
# __getitem__(self, key), __setitem__(self, key, value), __delitem__(self, key): Методи для роботи з індексацією об'єктів.

# class MyClass:
#     def __getitem__(self, key):
#         return self.value[key]
#     def __setitem__(self, key, value):
#         self.value[key] = value
#     def __delitem__(self, key):
#         del self.value[key]
# __eq__(self, other): Метод для перевірки рівності об'єктів (використовується операцією ==).

# class MyClass:
#     def __eq__(self, other):
#         return self.value == other.value
# __add__(self, other): Метод для додавання об'єктів (використовується операцією +).

# class MyClass:
#     def __add__(self, other):
#         return MyClass(self.value + other.value)
# Вивчення спеціальних методів допоможе вам краще розуміти і використовувати можливості об'єктно-орієнтованого
# програмування в Python. Повертайтеся до цієї теми, коли будете проходити нові уроки, щоб покращити свої знання та розуміння.