# Створіть ієрархію класів із використанням множинного успадкування. Виведіть на екран порядок вирішення методів для кожного класу.
# Поясніть, чому лінеаризація даних класів виглядає саме так.


class A:
    def method(self):
        print("Method of class A")

class B:
    def method(self):
        print("Method of class B")

class C(A, B):
    pass

# Для виведення порядку вирішення методів використовується атрибут __mro__, який доступний для будь-якого класу в Пайтоні.

# У нашому прикладі порядок вирішення методів для класу C буде таким:
# (<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)

# Пояснення порядку MRO
# Порядок вирішення методів визначається таким чином, щоб забезпечити послідовність успадкування, де:
#
# Кожен клас перевіряється тільки один раз.
# Порядок зберігає діамантову структуру успадкування (як у випадку, коли клас C успадковує одночасно від A і B).
# Цей підхід гарантує, що методи успадкованих класів будуть викликатися в правильному порядку, враховуючи ієрархію
# успадкування класів у Пайтоні.