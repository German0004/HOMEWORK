# Інтроспекція та рефлексія — це концепції в програмуванні, які стосуються можливості програми досліджувати і
# модифікувати свою власну структуру та поведінку під час виконання. У Python ці концепції реалізуються за допомогою
# вбудованих функцій та модулів. Давайте розглянемо ці концепції детальніше.

# Інтроспекція в Python
# Інтроспекція — це можливість програми досліджувати свої власні структури даних і об'єкти під час виконання. Python надає
# декілька вбудованих функцій та модулів для виконання інтроспекції:

# type(): Повертає тип об'єкта.
# id(): Повертає унікальний ідентифікатор об'єкта.
# dir(): Повертає список атрибутів і методів об'єкта.
# help(): Викликає довідкову систему для об'єкта.
# isinstance(): Перевіряє, чи є об'єкт екземпляром певного класу.
# issubclass(): Перевіряє, чи є клас підкласом іншого класу.
# Модуль inspect: Надає декілька корисних функцій для отримання інформації про живі об'єкти.


class MyClass:
    def __init__(self, value):
        self.value = value

    def my_method(self):
        pass

# Створення екземпляра класу
obj = MyClass(10)

# Використання інтроспекційних функцій
print(type(obj))  # <class '__main__.MyClass'>
print(id(obj))    # Унікальний ідентифікатор об'єкта
print(dir(obj))   # Список атрибутів і методів об'єкта
print(isinstance(obj, MyClass))  # True
print(issubclass(MyClass, object))  # True

# Використання модуля inspect
import inspect
print(inspect.getmembers(obj))  # Список членів об'єкта


# Рефлексія в Python
# Рефлексія — це можливість програми динамічно змінювати свою поведінку під час виконання, використовуючи інтроспекцію.
# Це означає, що програма може динамічно викликати методи, змінювати атрибути, створювати нові класи і функції під час виконання.


class MyClass:
    def __init__(self, value):
        self.value = value

    def my_method(self):
        print(f"Value is {self.value}")

# Створення екземпляра класу
obj = MyClass(10)

# Виклик методу за допомогою getattr()
method = getattr(obj, "my_method")
method()  # Output: Value is 10

# Зміна атрибуту за допомогою setattr()
setattr(obj, "value", 20)
print(obj.value)  # Output: 20

# Перевірка наявності атрибуту за допомогою hasattr()
print(hasattr(obj, "value"))  # Output: True

# Видалення атрибуту за допомогою delattr()
delattr(obj, "value")
print(hasattr(obj, "value"))  # Output: False


# Використання модуля inspect
# Модуль inspect надає більше можливостей для інтроспекції та рефлексії. Ось деякі з найкорисніших функцій:
#
# inspect.getmembers(): Повертає всі члени об'єкта.
# inspect.isfunction(): Перевіряє, чи є об'єкт функцією.
# inspect.ismethod(): Перевіряє, чи є об'єкт методом.
# inspect.getdoc(): Повертає документацію об'єкта.
# inspect.signature(): Повертає підпис функції або методу.
# Приклад використання модуля inspect



import inspect

def my_function(param1, param2):
    """Це приклад функції."""
    return param1 + param2

# Використання inspect для отримання інформації про функцію
print(inspect.isfunction(my_function))  # Output: True
print(inspect.getdoc(my_function))  # Output: Це приклад функції.
print(inspect.signature(my_function))  # Output: (param1, param2)


# Ці приклади демонструють, як можна використовувати інтроспекцію і рефлексію для дослідження і зміни поведінки програм
# під час виконання. Це потужні інструменти, які роблять Python надзвичайно гнучким і динамічним.