# Розробіть сокет-сервер на основі бібліотеки asyncio.

import asyncio
import socket

async def handle_client(reader, writer):
    data = await reader.read(1024)
    message = data.decode()
    print(f"Received: {message}")

    writer.write(data)
    await writer.drain()

    print("Close the connection")
    writer.close()

async def main():
    host = '127.0.0.1'
    port = 8888

    server = await asyncio.start_server(handle_client, host, port)

    addr = server.sockets[0].getsockname()
    print(f'Serving on {addr}')

    async with server:
        await server.serve_forever()

asyncio.run(main())

# Роз'яснення коду:

# handle_client: Ця корутина обробляє окреме з'єднання. Вона читає дані від клієнта, виводить їх у консоль і
# відправляє їх назад.
# main:
# Створення сервера: asyncio.start_server створює сервер, який слухає на заданому хості та порту.
# Обробка з'єднань: Коли клієнт підключається, створюється нова задача для обробки цього з'єднання.
# Запуск сервера: server.serve_forever() запускає безкінечний цикл обслуговування з'єднань.

# Пояснення концепцій:

# Корутини: Це функції, які можуть бути призупинені і відновлені. asyncio використовує корутини для
# неблокуючого вводу-виводу.
# asyncio.start_server: Ця функція створює TCP-сервер, який слухає на вказаному сокеті.
# reader і writer: Об'єкти, які надають інтерфейс для читання і запису даних.
# await: Оператор, який використовується для очікування завершення асинхронної операції.

# Розширення функціоналу:

# Обробка помилок: Додайте try-except блоки для обробки потенційних виключень, таких як з'єднання, що обриваються.
# Мультипротокольні сервери: Використовуйте модуль asyncio.protocols для створення серверів, які підтримують
# інші протоколи, такі як UDP.
# Веб-сервери: Використовуйте фреймворки на основі asyncio, такі як aiohttp, для створення веб-серверів.
# Веб-сокєти: Реалізуйте двосторонню комунікацію між сервером і клієнтом за допомогою веб-сокетів.
# Багатопоточність: Для ресурсомістких задач можна комбінувати asyncio з багатопоточністю за допомогою модуля
# concurrent.futures.

# Переваги asyncio:

# Висока продуктивність: Можливість обробляти велику кількість одночасних з'єднань.
# Простота: Використання асинхронного коду часто робить код більш читабельним і зрозумілим.
# Інтеграція з іншими бібліотеками: Легко інтегрується з іншими асинхронними бібліотеками Python.

# Подальші кроки:

# Вивчення додаткових можливостей asyncio: Дослідіть модулі asyncio.streams, asyncio.protocols та інші.
# Використання фреймворків: Ознайомтеся з фреймворками на основі asyncio, такими як aiohttp, Sanic та іншими.
# Розробка реальних додатків: Створіть власні проекти на основі asyncio для закріплення знань.

# Важливо: Цей приклад є базовим і демонструє основні принципи створення сокет-сервера на asyncio. Для реальних
# проектів може знадобитися більш складний код з обробкою помилок, безпекою та іншими аспектами.
#
# Додаткові ресурси:
#
# Офіційна документація asyncio: https://docs.python.org/3/library/asyncio.html
# Статті та туторіали: Шукайте в Інтернеті статті та туторіали по asyncio для більш глибокого розуміння.