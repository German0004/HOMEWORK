# Створіть функцію, яка приймає список з елементів типу int, а повертає новий список
# з рядкових значень вихідного масиву. Додайте анотацію типів для вхідних і вислідних
# значень функції.

from typing import List


def convert_to_strings(int_list: List[int]) -> List[str]:
    """Converts a list of integers to a list of strings.

    Args:
        int_list: A list of integers.

    Returns:
        A new list containing the string representations of the elements in the input list.
    """
    return [str(num) for num in int_list]


# Example usage
original_list = [1, 2, 3, 4]
string_list = convert_to_strings(original_list)
print(string_list)  # Output: ["1", "2", "3", "4"]

# Розберемо, що робить кожна частина коду:
#
# from typing import List: Цей рядок імпортує клас List з модуля typing. Це дозволяє нам вказувати, що очікується
# список (List) як вхідний і вихідний тип даних для нашої функції.

# def convert_to_strings(int_list: List[int]) -> List[str]::
# def convert_to_strings: Оголошуємо функцію з назвою convert_to_strings.
# int_list: List[int]: Вказуємо, що функція приймає один аргумент int_list, який є списком цілих чисел (List[int]).
# -> List[str]: Вказуємо, що функція поверне список рядків (List[str]).
# return [str(num) for num in int_list]: Це вираз спискового включення. Він створює новий список, перетворюючи кожне
# число з int_list на рядок за допомогою функції str().
# Приклад використання: Демонструє, як викликати функцію і отримати результат.

# Переваги використання анотацій типів:
#
# Зрозумілість коду: Покращує читабельність коду, особливо для великих проектів.
# Виявлення помилок: Багато IDE і лінтери можуть використовувати анотації для виявлення потенційних помилок під час
# написання коду.
# Автодоповнення: IDE з підтримкою анотацій типів можуть пропонувати автодоповнення і підказки, що прискорює розробку.
# Документація: Анотації типів служать як форма документації, описуючи призначення функції і типи даних, які вона оперує.

# Можливі розширення:
#
# Обробка інших типів даних: Можна розширити функцію для перетворення списків з інших типів даних (наприклад, float) в рядки.
# Додаткові форматування: Можна використовувати методи форматування рядків для отримання більш складних представлень
# чисел (наприклад, з фіксованою кількістю знаків після коми).
# Обробка порожнього списку: Можна додати перевірку на порожній вхідний список і повернути відповідний результат.
